# 工具链配置文件
# 定义开发、测试、部署全流程的工具集成配置

toolchain:
  # ================================
  # 版本控制工具
  # ================================
  
  version_control:
    git:
      version: ">=2.30"
      config:
        user.name: "AI Development Team"
        user.email: "ai-dev@company.com"
        core.autocrlf: "input"
        core.safecrlf: "true"
        pull.rebase: "true"
        init.defaultBranch: "main"
      
      # 分支策略
      branching_strategy:
        main_branch: "main"
        develop_branch: "develop"
        feature_prefix: "feature/"
        hotfix_prefix: "hotfix/"
        release_prefix: "release/"
      
      # Git Hooks集成
      hooks:
        pre-commit:
          - "lint-staged"
          - "type-check"
          - "security-scan"
        pre-push:
          - "test-unit"
          - "build-verify"
        post-merge:
          - "install-dependencies"
          - "migrate-database"

    git_flow:
      enabled: true
      feature:
        start_from: "develop"
        merge_to: "develop"
      release:
        start_from: "develop"
        merge_to: ["main", "develop"]
      hotfix:
        start_from: "main"
        merge_to: ["main", "develop"]

  # ================================
  # 代码质量工具
  # ================================
  
  code_quality:
    # 代码格式化
    formatters:
      prettier:
        enabled: true
        config_file: ".prettierrc"
        ignore_file: ".prettierignore"
        extensions: [".js", ".ts", ".jsx", ".tsx", ".json", ".md"]
        
      black:
        enabled: true
        line_length: 88
        target_versions: ["py38", "py39", "py310"]
        
      gofmt:
        enabled: true
        simplify: true

    # 代码检查
    linters:
      eslint:
        enabled: true
        config_file: ".eslintrc.js"
        extensions: [".js", ".ts", ".jsx", ".tsx"]
        rules:
          - "@typescript-eslint/recommended"
          - "react-hooks/recommended"
          - "prettier/recommended"
          
      pylint:
        enabled: true
        config_file: "pyproject.toml"
        disable: ["C0114", "C0115", "C0116"]
        
      golangci-lint:
        enabled: true
        config_file: ".golangci.yml"
        linters:
          - "govet"
          - "errcheck"
          - "staticcheck"
          - "gosimple"

    # 静态分析
    static_analysis:
      sonarqube:
        enabled: true
        server_url: "https://sonar.company.com"
        quality_gate: "company-quality-gate"
        coverage_threshold: 80
        
      codecov:
        enabled: true
        threshold: 80
        patch_threshold: 70

  # ================================
  # 构建工具
  # ================================
  
  build_tools:
    # 前端构建
    frontend:
      node:
        version: ">=18.0.0"
        package_manager: "npm"  # npm, yarn, pnpm
        
      bundlers:
        vite:
          enabled: true
          config_file: "vite.config.ts"
          plugins:
            - "@vitejs/plugin-react"
            - "@vitejs/plugin-typescript"
            - "vite-plugin-eslint"
            
        webpack:
          enabled: false
          config_file: "webpack.config.js"
          
      transpilers:
        typescript:
          enabled: true
          config_file: "tsconfig.json"
          strict: true
          
        babel:
          enabled: true
          config_file: "babel.config.js"
          presets:
            - "@babel/preset-env"
            - "@babel/preset-react"
            - "@babel/preset-typescript"

    # 后端构建
    backend:
      python:
        version: ">=3.8"
        package_manager: "pip"
        virtual_env: "poetry"
        
        build_tools:
          poetry:
            enabled: true
            config_file: "pyproject.toml"
            
          setuptools:
            enabled: false
            
      java:
        version: ">=11"
        build_tools:
          maven:
            enabled: true
            config_file: "pom.xml"
            
          gradle:
            enabled: false
            config_file: "build.gradle"
            
      go:
        version: ">=1.19"
        modules: true
        build_flags:
          - "-ldflags=-w -s"
          - "-trimpath"

    # 容器化
    containerization:
      docker:
        enabled: true
        dockerfile: "Dockerfile"
        dockerignore: ".dockerignore"
        build_args:
          - "NODE_ENV=production"
          - "PYTHON_ENV=production"
          
        # 多阶段构建
        multi_stage:
          enabled: true
          stages:
            - name: "build"
              base_image: "node:18-alpine"
            - name: "production"
              base_image: "nginx:alpine"
              
        # 镜像优化
        optimization:
          layer_caching: true
          multi_arch: ["amd64", "arm64"]
          security_scanning: true

  # ================================
  # 测试工具
  # ================================
  
  testing:
    # 单元测试
    unit_testing:
      jest:
        enabled: true
        config_file: "jest.config.js"
        coverage_threshold:
          global:
            branches: 70
            functions: 80
            lines: 80
            statements: 80
            
      pytest:
        enabled: true
        config_file: "pytest.ini"
        plugins:
          - "pytest-cov"
          - "pytest-asyncio"
          - "pytest-mock"
          
      go_test:
        enabled: true
        coverage_mode: "atomic"
        race_detection: true

    # 集成测试
    integration_testing:
      testcontainers:
        enabled: true
        containers:
          postgres: "postgres:13-alpine"
          redis: "redis:6-alpine"
          nginx: "nginx:alpine"
          
      docker_compose:
        enabled: true
        file: "docker-compose.test.yml"
        
    # E2E测试
    e2e_testing:
      playwright:
        enabled: true
        config_file: "playwright.config.ts"
        browsers: ["chromium", "firefox", "webkit"]
        parallel: true
        retries: 2
        
      cypress:
        enabled: false
        config_file: "cypress.config.ts"

    # 性能测试
    performance_testing:
      k6:
        enabled: true
        scripts_dir: "tests/performance"
        thresholds:
          http_req_duration: ["p(95)<500"]
          http_req_failed: ["rate<0.01"]
          
      jmeter:
        enabled: false
        scripts_dir: "tests/jmeter"

    # 安全测试
    security_testing:
      owasp_zap:
        enabled: true
        baseline_scan: true
        full_scan: false
        
      snyk:
        enabled: true
        vulnerability_threshold: "high"
        monitor: true
        
      trivy:
        enabled: true
        scan_types: ["vuln", "secret", "config"]

  # ================================
  # 部署工具
  # ================================
  
  deployment:
    # 容器编排
    orchestration:
      kubernetes:
        enabled: true
        version: ">=1.24"
        manifests_dir: "k8s"
        
        tools:
          kubectl:
            version: ">=1.24"
            context: "company-cluster"
            
          helm:
            version: ">=3.8"
            charts_dir: "helm"
            values_files:
              - "values.yaml"
              - "values-prod.yaml"
              
          kustomize:
            enabled: true
            overlays_dir: "overlays"
            
      docker_swarm:
        enabled: false
        stack_file: "docker-stack.yml"

    # IaC工具
    infrastructure_as_code:
      terraform:
        enabled: true
        version: ">=1.3"
        modules_dir: "terraform"
        
        providers:
          aws:
            version: "~> 4.0"
            region: "us-west-2"
          azure:
            version: "~> 3.0"
          gcp:
            version: "~> 4.0"
            
      ansible:
        enabled: true
        playbooks_dir: "ansible"
        inventory: "inventory.yml"
        
      pulumi:
        enabled: false
        language: "typescript"

    # CI/CD平台
    cicd:
      github_actions:
        enabled: true
        workflows_dir: ".github/workflows"
        secrets:
          - "DOCKER_HUB_TOKEN"
          - "KUBE_CONFIG"
          - "SONAR_TOKEN"
          
      gitlab_ci:
        enabled: false
        config_file: ".gitlab-ci.yml"
        
      jenkins:
        enabled: false
        jenkinsfile: "Jenkinsfile"

  # ================================
  # 监控工具
  # ================================
  
  monitoring:
    # 应用监控
    application_monitoring:
      prometheus:
        enabled: true
        config_file: "prometheus.yml"
        scrape_interval: "15s"
        retention: "15d"
        
      grafana:
        enabled: true
        dashboards_dir: "grafana/dashboards"
        data_sources:
          - name: "prometheus"
            type: "prometheus"
            url: "http://prometheus:9090"
            
      jaeger:
        enabled: true
        sampling_rate: 0.1
        collector_endpoint: "http://jaeger:14268"

    # 日志管理
    logging:
      elk_stack:
        enabled: true
        elasticsearch:
          version: "8.x"
          cluster_name: "company-logs"
        logstash:
          config_dir: "logstash/pipeline"
        kibana:
          version: "8.x"
          
      fluentd:
        enabled: true
        config_file: "fluentd.conf"
        
      loki:
        enabled: false
        config_file: "loki.yml"

    # 错误跟踪
    error_tracking:
      sentry:
        enabled: true
        dsn: "${SENTRY_DSN}"
        environment: "${ENVIRONMENT}"
        sample_rate: 1.0
        
      bugsnag:
        enabled: false
        api_key: "${BUGSNAG_API_KEY}"

  # ================================
  # 安全工具
  # ================================
  
  security:
    # 密钥管理
    secrets_management:
      vault:
        enabled: true
        address: "https://vault.company.com"
        auth_method: "kubernetes"
        
      sealed_secrets:
        enabled: true
        controller_namespace: "kube-system"
        
      external_secrets:
        enabled: false
        providers: ["aws", "azure", "gcp"]

    # 容器安全
    container_security:
      falco:
        enabled: true
        rules_file: "falco_rules.yaml"
        
      aqua:
        enabled: false
        
      twistlock:
        enabled: false

    # 网络安全
    network_security:
      istio:
        enabled: true
        version: "1.17"
        security_policies: true
        
      linkerd:
        enabled: false
        
      calico:
        enabled: true
        network_policies: true

  # ================================
  # 开发环境工具
  # ================================
  
  development_environment:
    # IDE/编辑器配置
    editors:
      vscode:
        enabled: true
        settings_file: ".vscode/settings.json"
        extensions:
          - "ms-python.python"
          - "ms-vscode.vscode-typescript-next"
          - "bradlc.vscode-tailwindcss"
          - "esbenp.prettier-vscode"
          
      intellij:
        enabled: false
        config_dir: ".idea"

    # 本地开发
    local_development:
      docker_compose:
        enabled: true
        file: "docker-compose.dev.yml"
        services:
          - "database"
          - "redis"
          - "elasticsearch"
          
      tilt:
        enabled: true
        tiltfile: "Tiltfile"
        
      skaffold:
        enabled: false
        config_file: "skaffold.yaml"

    # 代码生成
    code_generation:
      openapi_generator:
        enabled: true
        spec_file: "api/openapi.yaml"
        
      graphql_codegen:
        enabled: true
        config_file: "codegen.yml"
        
      protoc:
        enabled: true
        proto_path: "proto"

# ================================
# 工具链集成配置
# ================================

integration:
  # 工具间依赖
  dependencies:
    build_before_test: true
    lint_before_commit: true
    security_scan_before_deploy: true
    
  # 并行执行
  parallel_execution:
    max_parallel_jobs: 4
    
    parallelizable_tasks:
      - ["lint", "type-check"]
      - ["unit-test", "integration-test"]
      - ["security-scan", "dependency-check"]
    
    sequential_tasks:
      - "build"
      - "test"
      - "deploy"

  # 缓存策略
  caching:
    build_cache:
      enabled: true
      location: ".cache/build"
      max_size: "10GB"
      
    test_cache:
      enabled: true
      location: ".cache/test"
      max_size: "5GB"
      
    dependency_cache:
      enabled: true
      package_managers: ["npm", "pip", "go mod"]

# ================================
# 环境特定配置
# ================================

environments:
  development:
    debug_mode: true
    hot_reload: true
    source_maps: true
    
  testing:
    test_coverage: true
    mock_external_services: true
    
  staging:
    production_like: true
    performance_monitoring: true
    
  production:
    optimizations: true
    monitoring: true
    alerting: true
    backup: true